#!/usr/bin/env bash
# moves files to the ~/.trash directory

set -e

# -- global variables -- #
dest="$HOME/.trash"
table_header=""
errlog="$TRASH_UTIL_DIR/.utilities/.errlog"

# -- functions -- #

# error handler
on_error_exec()
{
	echo "[FATAL]: some error occured. See $errlog" 2>>"$errlog"
}

trap 'on_error_exec' ERR

# draw_table_line - draws table header line
#+ $1(int): width of the line
#+ Return: void
draw_table_line()
{
	for ((i = 1; i <= "$1"; i++)); do
		table_header+='-'
	done
}


# char_padding - pads table_header fields with specified char
#+ $1(int): number of chars to pad
#+ $2(int): the char to use for padding
#+ Return: void
char_padding()
{
	for ((i = 1; i <= $1; i++)); do
		table_header+="$2"
	done
}


# write_table_fields - writes table header fields
#+ $1: first filed
#+ $2: second field
#+ Return: void
write_table_fields()
{
	table_header+="\n$1"
	char_padding "27"  "$3"
	table_header+="$2\n"
}

# create_trashlog - creates the trashlog file
#+ $1: width of the table
#+ Return: void
create_trashlog()
{
	draw_table_line "$1"
	write_table_fields "FILE"  "| LOCATION"  ' '
	draw_table_line "$1"
	echo -e "$table_header" > "$dest/.trashlog" 2>>"$errlog"
}


# --- MAIN ENTRY --- #
# if args not supplied, exit with msg
if (( $# == 0 )); then
	echo "trash: missing operand" 2>>"$errlog"
	exit 1
fi

# else move each file
for file in $@; do
	# if file doesn't exist, print message and exit
	if [ ! -e "$file" ]; then
		echo "file '$file' doesn't exist" 2>>"$errlog"
	else
		# if trash directory doesn't exist:
		if [[ ! -e "$dest" || ! -d "$dest" ]]; then
			# create trash
			mkdir $dest
			if (( $? != 0 )); then
				exit 1
			fi
			# create trashlog
			#+ USAGE: create_trashlog <width of table>
			create_trashlog "80" 2>>"$errlog"
		fi

		# set log info
		pathfrom="$(dirname "$(realpath $file 2>>"$errlog")")"
		loggr="$TRASH_UTIL_DIR/.utilities/trash_logr"

		# if file already exists in trash, rename it
		fn="$(basename $file)"
		tempfile="$dest/$fn"
		new_fn="$tempfile.old"
		if [ -e "$tempfile" ]; then
			while [[ -e "$new_fn" ]]; do
				new_fn+=".old"
			done
			mv "$tempfile" "$new_fn" 1>&2
			"$loggr" -u "$fn" "$(basename $new_fn 2>>"$errlog")" 2>>"$errlog"
		fi

		# add file to log
		"$loggr" -a "$fn" "$pathfrom" 2>>"$errlog"

		# move file to trash
		mv $file $dest 2>>"$errlog"
	fi
done
