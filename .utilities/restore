#!/usr/bin/env bash

# -- global variables --- #
trash="$HOME/.trash"				# path to trash directory
trash_log="$trash/.trashlog"		# path to trashlog file
loggr="$TRASH_UTIL_DIR/.utilities/trash_logr" 	# logger script
option_body=""						# option_body string
option_header=""					# option msg_header
fname_max_width=0					# max_width of file_name field
loc_max_width=0						# max_width of location field
declare -a MATCH_FILES				# array of matching files in trashlog
declare -i R_OPT					# restore option
declare -a OP_CODES					# array of option codes
op_idx=0							# index of option codes
errlog="$TRASH_UTIL_DIR/.utilities/.errlog"	# error log


# -- functions -- #

# pad_spaces - add spaces to message header or body
#+ uses two flags:
#+ -h for header section, -b for body section
#+ Return: void
pad_spaces()
{
	unset OPTIND
	while getopts "h:b:" flag; do
		case "$flag" in
			'h')
				for ((i=$2; i > 0; i--)); do
					option_header+=' '
				done
				;;
			'b')
				for ((i=$2; i > 0; i--)); do
					option_body+=' '
				done
				;;
			*)
				echo "__err__"
				;;
		esac
	done
}


# set_field_widths - sets widths for each message field
#+ it's based on the length of the maximum file_name & path lengths
#+ necessary to keep output formated in organised table
#+ Return: void
set_field_widths()
{
	# determine max width of each field
	for ((i = 0; i < ${#MATCH_FILES[@]}; i += 2)); do
		if [[ "${#MATCH_FILES[$i]}" -gt "$fname_max_width" ]]; then
			fname_max_width="${#MATCH_FILES[$i]}"
		fi
		if [[ "${#MATCH_FILES[$((i + 1))]}" -gt "$loc_max_width" ]]; then
			loc_max_width="${#MATCH_FILES[$((i + 1))]}"
		fi
	done
	((fname_max_width += 2))
	((loc_max_width += 2))
}


# create_msg_header - creates message header
#+ Table is of 3 fields only
# Return: void
create_msg_header()
{
	# name fields
	field_1="FILE"
	field_2="LOCATION"
	field_3="OPTION"

	# add fields and spaces
	option_header="$field_1"
	pad_spaces -h "$(($fname_max_width - ${#field_1}))"
	option_header+="$field_2"
	pad_spaces -h "$(($loc_max_width - ${#field_2}))"
	option_header+="$field_3\n"

	# set body to 'header' value
	option_body="$option_header"
}


# parse_msg_body - parses message body, consisting of matching
#+ files, corresponding paths, and options
parse_msg_body()
{
	for ((j=0; j < ${#MATCH_FILES[@]}; j += 2 )); do
		# calculate length of each field and space diffs
		fn_len="${#MATCH_FILES[$j]}"
		loc_len="${#MATCH_FILES[$((j + 1))]}"
		diff_f="$((fname_max_width - fn_len))"
		diff_l="$((loc_max_width - loc_len))"

		# add field values and spaces
		option_body+="${MATCH_FILES[$j]}"
		pad_spaces -b "$diff_f"
		option_body+="${MATCH_FILES[$((j + 1))]}"
		pad_spaces -b "$diff_l"
		option_body+="[$j]\n"

		OP_CODES["$op_idx"]="$j"
		((op_idx += 1))
	done
}


# print_opt_msg - prints option message to stdout
#+ Only called if matching_files are > 1
# Return: void
print_opt_msg()
{
	set_field_widths
	create_msg_header
	parse_msg_body "$1"
	echo -e "$option_body"
}


# opt_selector - if matching files in log are > 1, they are
#+ printed to stdout with optons for user to select
# Return: void
opt_selector()
{
	echo -e "$1 files found with name '$2':\n"
	print_opt_msg
	read -p "Select which [OPTION] to restore: " R_OPT

	# check received option if unknown and handle
	unknown_opt="true"
	for opt in "${OP_CODES[@]}"; do
		if (( $R_OPT == $opt )); then
			unknown_opt="false"
		fi
	done
	if [[ "$unknown_opt" == "true" ]]; then
		1>&2 echo "[ERROR]: unknown option [$R_OPT]"
		exit 1
	fi
}

strip_suffixes()
{
	old_suff="true"
	f_name="$1"
	while [[ "$old_suff" == "true" ]]; do
		if [[ "$(echo $f_name | rev | cut -d '.' -f1)" == "dlo" ]]; then
			f_name="$(echo $f_name | rev | cut -d '.' -f2- | rev)"
		else
			old_suff="false"
		fi
	done
	echo "$f_name"
}

# --- MAIN ENTRY --- #
# check if no arg is provided. Exit if true else inspect each arg
if (( $# == 0 )); then
	1>&2 echo "[ERROR]: restore: missing argument"
	exit 1
fi

# iterate through file names provided
for name in $@; do
	# set path to 'name' in variable 'file'
	ifpath="$(echo "$name" | grep -wc '.trash')"
	if [[ "$ifpath" -gt '0' ]]; then
		file="$name"
	else
		if [[ ${name:0:1} == "/" ]]; then
			file="$trash"
			file+="$name"
		else
			file="$trash/$name"
		fi
	fi

	# if 'file' is not in 'trash' throw error
	#+ otherwise proceed to parse 'file'
	base="$(basename $file)"
	if [ ! -e $file ]; then
		1>&2 echo "[ERROR]: '"$base"' not in trash"
	else
		# parse trashlog and select logs matching 'base'
		res=""
		f_count=0
		while read -r line; do
			entry="$(echo "$line" | tr -d '|' | tr '\n' ' ' | tr -s ' ')"
			name="$(echo "$line" | cut -d ' ' -f1)"
			count="$(echo "$name" | grep -wc "$base")"
			if [[ "$name" == "$base" || "$count" -gt 0 ]]; then
				res+="$entry"
				((f_count++))
			fi
		done < "$trash_log"

		# read matching logs int array and set file_option index
		IFS=' ' read -ra MATCH_FILES <<< "$res"
		if (( $f_count > 1 )); then
			opt_selector "$f_count" "$base"
		else
			R_OPT=0
		fi

		# restore the file with message success

		# define variables for final move
		log_fname="${MATCH_FILES[$R_OPT]}"
		dest_fname="$(strip_suffixes "$log_fname")"
		dest="${MATCH_FILES[$((R_OPT + 1))]}"
		check="true"

		# handle if file_name exists in destination
		#+ keep checking until final file_name is unique to destination or
		#+ user chooses to replace existing file
		#+ final value of 'dest_fname' is the usable value
		while [[ "$check" == "true" ]]; do
			if [[ -e "$dest/$dest_fname" ]]; then
				echo "'$dest_fname' already exists in $dest"
				read -p "Give restored file a new name? [y/n]: " OPT_R

				# handle user entry options
				case "$OPT_R" in
					'y'|'Y')
						read -p "Enter new name: " dest_fname
						;;
					'n'|'N')
						# confirm replacement and proceed or exit if no
						echo "continuing will replace existing file."
						read -p "Proceed? [y/n]: " OPT_N
						case "$OPT_N" in
							'y'|'Y')
								echo "proceeding to restore and replace..."
								break
								;;
							*)
								1>&2 echo "TERMINATED"
								exit 1
								;;
						esac
						;;
					*)
						1>&2 echo "unknown option"
						exit 1
						;;
				esac
			else
				check="false"
			fi
		done

		# move file from trash to destination
		1>&2 mv "$trash/$log_fname" "$dest/$dest_fname"
		1>&2 "$loggr" -d "$log_fname"

		# print success message
		1>&2 echo "[$log_fname] restored  to [$dest]"
	fi
done
rm -f '.tmp'
