#!/usr/bin/env bash

# rmf - forcibly deletes files
#+	basically an rm -f
#+	knows if name passed is a directory or not
#+	if rmf'ed file is in trash, it updates the trash log

# -- global variables -- #
trash_loggr="$TRASH_UTIL_DIR/.utilities/trash_logr"	# trash logger file
trash="$HOME/.trash"								# abs path to trash
errlog="$TRASH_UTIL_DIR/.utilities/.errlog"			# error log

# -- error handler -- #
set -e
on_error_exec()
{
	1>&2 echo "[FATAL]: some error occured. See $errlog"
}
trap 'on_error_exec' ERR

# -- Entry Point -- #
# throw error if no arg is passed.
if (( $# == 0 )); then
	1>&2 echo -e "rm: missing operand\nTry 'rm --help' for more information."
	exit 1
fi

# parse each file for deletion
for file in $@; do
	# get file's abs path and path_to_trash if in trash
	base="$(basename $file 2>>"$errlog")"
	file_rpath="$(realpath $file 2>>"$errlog")"
	trash_path="$trash/$base"

	# delete file
	if [ -d $file ]; then
		if [ ! -s $file ]; then
			rmdir "$file" 2>>"$errlog"
		else
			rm -rf "$file" 2>>"$errlog"
		fi
	else
		rm -f "$file" 2>>"$errlog"
	fi

	# if file is rmf'ed from '.trash', update trashlog
	if [[ "$trash_path" == "$file_rpath" ]]; then
		"$trash_loggr" -d "$base" 2>>"$errlog"
	fi
done
